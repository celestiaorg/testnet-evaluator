version: '3.6'
services:
  valuter:
      image: mojiz/valuter:latest
      container_name: valuter
      build:
        context: ./valuter
        # target: development  # development | test | production (default) # docker-compose up --build
      # ports: 
      #   - 8080:8080
      #   - 2346:2345
      logging:
        driver: "json-file"
        options:
          max-size: "200k"
          max-file: "10"
      volumes:
        - ./valuter/conf.json:/app/conf.json
        - ./valuter:/go/src/app
      network_mode: host
      environment:
        SERVING_ADDR: ${VALUTER_SERVING_ADDR:-:8080} 
        POSTGRES_DB: ${POSTGRES_DB:-tmp}
        POSTGRES_USER: ${POSTGRES_USER:-root}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
        POSTGRES_PORT: ${POSTGRES_PORT:-5432}
        POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
        KYC_API_KEY: ${KYC_API_KEY}
        KYC_CLIENT_ID: ${KYC_CLIENT_ID}
        KYC_API_PATH: ${KYC_API_PATH}
      healthcheck:
        test: curl --fail http://localhost:8080/ || exit 1
        interval: 30s
        retries: 10 # Will try for 5 minutes      
      restart: always
      security_opt:
        - "seccomp:unconfined"

  # #----------------#

  # valuter-ui:
  #   image: mojiz/valuter-ui:latest
  #   container_name: valuter-ui
  #   build:
  #     context: ./valuter-ui
  #   ports: 
  #     - 8081:80
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "200k"
  #       max-file: "10"
  #   volumes:
  #     - ./valuter-ui:/root/src
  #     - ./valuter-ui/public/conf.js:/usr/share/nginx/html/conf.js
  #   network_mode: host
  #   healthcheck:
  #     test: curl --fail http://localhost:8081/ || exit 1
  #     interval: 30s
  #     retries: 10 # Will try for 5 minutes      
  #   restart: always
  #   security_opt:
  #     - "seccomp:unconfined"

  # #----------------#

  cosmologger:
    image: mojiz/cosmologger:latest
    container_name: cosmologger
    build:
      context: ./cosmologger
      # target: development  # development | test | production (default) # docker-compose up --build
    depends_on: 
      - postgres
    # ports: 
    #   - 2345:2345
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    volumes:
      - ./cosmologger:/go/src/app  # We need it for development
      - ./cosmologger/conf.json:/app/conf.json
    network_mode: host
    environment:
      RPC_ADDRESS: ${RPC_ADDRESS:-}
      GRPC_ADDRESS: ${GRPC_ADDRESS:-}
      GRPC_TLS: ${GRPC_TLS:-false}
      POSTGRES_DB: ${POSTGRES_DB:-tmp}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      DATA_COLLECTION_MODE: ${DATA_COLLECTION_MODE:-event}
    # healthcheck:
    #   test: curl --fail http://localhost/ || exit 1
    #   interval: 30s
    #   retries: 10 # Will try for 5 minutes      
    restart: always
    security_opt:
      - "seccomp:unconfined"

  #----------------#

  nodelogger:
    image: mojiz/nodelogger:latest
    container_name: nodelogger
    build:
      context: ./nodelogger
      # target: development  # development | test | production (default) # docker-compose up --build
    depends_on: 
      - postgres
    # ports: 
    #   - 2345:2345
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    volumes:
      - ./nodelogger:/go/src/app  # We need it for development
    network_mode: host
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      PROMETHEUS_URL: ${PROMETHEUS_URL}
      PROMETHEUS_SYNC_INTERVAL: ${PROMETHEUS_SYNC_INTERVAL}
      API_ROWS_PER_PAGE: ${API_ROWS_PER_PAGE}
      REST_API_ADDRESS: ${NODELOGGER_REST_API_ADDRESS}
      DEMO: ${DEMO:-false}
      POSTGRES_DB: ${POSTGRES_DB:-tmp}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
    # healthcheck:
    #   test: curl --fail http://localhost/ || exit 1
    #   interval: 30s
    #   retries: 10 # Will try for 5 minutes      
    restart: always
    security_opt:
      - "seccomp:unconfined"

  #----------------#

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tmp}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
    volumes:
      - postgres-db:/var/lib/postgresql/data
    network_mode: host
    user: postgres
    entrypoint: "postgres -N 999"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always

  #----------------#

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    depends_on: 
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
       - ./pgadmin:/root/.pgadmin
    network_mode: host
    restart: unless-stopped

  #----------------# 

volumes:
  postgres-db: